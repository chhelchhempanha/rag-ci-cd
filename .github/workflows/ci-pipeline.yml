name: CD Pipeline to Google Cloud Run (staging and production)

on:
  push:
    branches:
      - staging
      - main
  workflow_dispatch: {}
  release:
    types: [published]

env:
  PORT: 8000
  IMAGE: ${{ vars.IMAGE }}:${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Setup, test, and build FastAPI project
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Build Docker image, push to registry, and deploy to Cloud Run
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Docker Hub
        env:
          D_USER: ${{ secrets.DOCKER_USER }}
          D_PASS: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$D_PASS" | docker login -u "$D_USER" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE }} .

      - name: Push image to Docker Hub
        run: docker push ${{ env.IMAGE }}
      - name: Enable Cloud Run API
        run: gcloud services enable run.googleapis.com

      - name: Create .env file for Cloud Run
        run: |
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "âœ… .env file created successfully"

      # ðŸš€ Deploy to Production (main branch + release)
      - name: Deploy to Cloud Run - Production
        if: github.event_name == 'release' && github.event.action == 'published' && github.event.release.target_commitish == 'main'
        run: |
          echo "ðŸš€ Deploying to PRODUCTION"
          gcloud run deploy ${{ vars.GCR_PROJECT_NAME }} \
            --region ${{ vars.GCR_REGION }} \
            --image ${{ env.IMAGE }} \
            --platform managed \
            --allow-unauthenticated \
            --tag production \
            --set-env-vars PORT=${{ env.PORT }} \
            --set-env-vars GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            --set-env-vars GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}

      # ðŸš§ Deploy to Staging (staging branch)
      - name: Deploy to Cloud Run - Staging
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "ðŸš§ Deploying to STAGING"
          gcloud run deploy ${{ vars.GCR_STAGING_PROJECT_NAME }} \
            --region ${{ vars.GCR_REGION }} \
            --image ${{ env.IMAGE }} \
            --platform managed \
            --allow-unauthenticated \
            --tag staging \
            --set-env-vars PORT=${{ env.PORT }} \
            --set-env-vars GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            --set-env-vars GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
      
      - name: Show Cloud Run URL
      run: |
        URL=$(gcloud run services describe gcr-ci-cd-staging --region us-central1 --format='value(status.url)')
        echo "BASE_URL=$URL"
   
